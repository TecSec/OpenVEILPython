LIST(APPEND CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmakemodules)

IF(WIN32)
	cmake_minimum_required(VERSION 3.1.3)
	set_property(GLOBAL PROPERTY USE_FOLDERS On)
ELSE()
	cmake_minimum_required(VERSION 3.1.3)
ENDIF()

project(OpenVEILPythonWrapper C CXX)

IF(WIN32)
	if(MSVC_IDE)
		set(TS_INSTALL_PREFIX       "c:/TecSec/VEIL_7-0")
	else(MSVC_IDE)
		set(TS_INSTALL_PREFIX       "c:/TecSec/VEIL_7-0")
	endif(MSVC_IDE)
	set(TS_INSTALL_PREFIX_DEBUG   "c:/TecSec/VEIL_7-0")
	set(TS_INSTALL_PREFIX_RELEASE "c:/TecSec/VEIL_7-0")
ELSE(WIN32)
	SET(TS_INSTALL_PREFIX "${CMAKE_SOURCE_DIR}/../local" CACHE STRING "The install path to use for Linux")
ENDIF(WIN32)

set(TS_MODULE OpenVEILPython)

include(tecsec_top)
include(precompiled.header)
set(TS_INSTALL_PREFIX ${TS_INSTALL_PREFIX}/${TS_TOOLSET})
include (tecsec_installdirs)

include(summary)
include(${ALLBIN_DIR}/VEILApiVersion.cmake)

set(CMAKE_BUILD_TYPE ${TS_VS_CONFIG} CACHE STRING "The configuration build type")
if (CMAKE_CONFIGURATION_TYPES)
  set (CMAKE_CONFIGURATION_TYPES ${TS_VS_CONFIG})
  set (CMAKE_CONFIGURATION_TYPES "${CMAKE_CONFIGURATION_TYPES}" CACHE STRING "Reset the configurations for ${VEILCORENAME}" )
endif()


# # IF(WIN32)
# # set(BOOST_ROOT c:/boost;${CMAKE_CURRENT_SOURCE_DIR}/../boost_1_59_0;${CMAKE_CURRENT_SOURCE_DIR}/../boost;C:/Program Files/boost_1_59_0)
# # ELSE(WIN32)
# # set(BOOST_ROOT ${CMAKE_CURRENT_SOURCE_DIR}/../boost_1_59_0;${CMAKE_CURRENT_SOURCE_DIR}/../boost;C:/Program Files/boost_1_59_0)
# # ENDIF(WIN32)

# set(Boost_DEBUG OFF)
# set(Boost_ADDITIONAL_VERSIONS 1.60 1.59)
# set(Boost_USE_MULTITHREADED ON)
# set(Boost_USE_STATIC_LIBS       OFF)
# set(Boost_USE_STATIC_RUNTIME    OFF)

# FIND_PACKAGE(Boost 1.59 COMPONENTS python3 REQUIRED)
# message(STATUS Boost_INCLUDE_DIRS = ${Boost_INCLUDE_DIRS})
# message(STATUS Boost_LIBRARY_DIRS = ${Boost_LIBRARY_DIRS})
# message(STATUS Boost_PYTHON3_LIBRARY = ${Boost_PYTHON3_LIBRARY})
# message(STATUS Boost_LIBRARIES = ${Boost_LIBRARIES})

set(Python_ADDITIONAL_VERSIONS 3.5.1 3.5 3.4)
FIND_PACKAGE(PythonInterp)
if(PYTHONINTERP_FOUND)
message(STATUS "Found Python interpreter ${PYTHON_VERSION_STRING}")
set(Python_ADDITIONAL_VERSIONS "")
FIND_PACKAGE(PythonLibs)
message(STATUS PYTHONLIBS_FOUND = ${PYTHONLIBS_FOUND})
message(STATUS PYTHON_LIBRARIES = ${PYTHON_LIBRARIES})
message(STATUS PYTHON_INCLUDE_PATH = ${PYTHON_INCLUDE_PATH})
message(STATUS PYTHON_INCLUDE_DIRS = ${PYTHON_INCLUDE_DIRS})
message(STATUS PYTHON_DEBUG_LIBRARIES = ${PYTHON_DEBUG_LIBRARIES})
message(STATUS PYTHONLIBS_VERSION_STRING = ${PYTHONLIBS_VERSION_STRING})
message(STATUS PYTHON_LIBRARY_DEBUG = ${PYTHON_LIBRARY_DEBUG})
message(STATUS PYTHON_LIBRARY_RELEASE = ${PYTHON_LIBRARY_RELEASE})
	if(PYTHON_LIBRARY_DEBUG STREQUAL PYTHON_LIBRARY_RELEASE AND TS_CONFIG STREQUAL "DEBUG")
		add_definitions(-DBOOST_DEBUG_PYTHON)
	endif()
endif(PYTHONINTERP_FOUND)

if(PYTHONLIBS_FOUND)
  include_directories(${PYTHON_INCLUDE_PATH})
  link_directories(${PYTHON_LIBRARY_DIRS})
endif()
if(Boost_FOUND)
  include_directories(${Boost_INCLUDE_DIRS})
  link_directories(${Boost_LIBRARY_DIRS})
endif()
include_directories(ThirdParty/pybind11/include)

add_uninstall()

add_subdirectory(src)

summary()

CopyImportTargetBinaries(VEILCore ${BIN_DIR})
CopyImportTargetBinaries(VEILFileSupport ${BIN_DIR})
CopyImportTargetBinaries(VEILCmsHeader ${BIN_DIR})
list(GET Boost_LIBRARIES 1 _tmp)
get_filename_component(__boostPath ${_tmp} DIRECTORY)
get_filename_component(__boostFile ${_tmp} NAME_WE)
install(FILES ${CMAKE_CURRENT_SOURCE_DIR}/Samples/tokenList.py ${CMAKE_CURRENT_SOURCE_DIR}/Samples/dumpmodule.py DESTINATION ${BIN_DIR})

# DumpAllVariables()
# get_filename_component(__pythonPath ${PYTHON_EXECUTABLE} DIRECTORY)
# install(FILES ${__pythonPath}/python${PYTHON_VERSION_MAJOR}${PYTHON_VERSION_MINOR}${CMAKE_SHARED_LIBRARY_SUFFIX} DESTINATION ${BIN_DIR})
